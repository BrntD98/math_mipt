#include <iostream>
#include <cmath>

using namespace std;

double dot_product(double* a, double* b, int n) {
    double res = 0;
    for (int i = 0; i < n; i++) {
        res += a[i] * b[i];
    }
    return res;
}

void matrix_vector_multiply(double** A, double* x, double* y, int n) {
    for (int i = 0; i < n; i++) {
        y[i] = 0;
        for (int j = 0; j < n; j++) {
            y[i] += A[i][j] * x[j];
        }
    }
}

void conjugate_gradient(double** A, double* b, double* x, int n) {
    double* r = new double[n];
    double* p = new double[n];
    double* Ap = new double[n];
    double alpha, beta, rr_old, rr_new;

    matrix_vector_multiply(A, x, r, n);
    for (int i = 0; i < n; i++) {
        r[i] = b[i] - r[i];
        p[i] = r[i];
    }
    rr_old = dot_product(r, r, n);

    for (int k = 0; k < n; k++) {
        matrix_vector_multiply(A, p, Ap, n);
        alpha = rr_old / dot_product(p, Ap, n);
        for (int i = 0; i < n; i++) {
            x[i] += alpha * p[i];
            r[i] -= alpha * Ap[i];
        }
        rr_new = dot_product(r, r, n);
        if (sqrt(rr_new) < 1e-6) {
            break;
        }
        beta = rr_new / rr_old;
        for (int i = 0; i < n; i++) {
            p[i] = r[i] + beta * p[i];
        }
        rr_old = rr_new;
    }

    delete[] r;
    delete[] p;
    delete[] Ap;
}

int main() {
    int n = 3;
    double** A = new double*[n];
    for (int i = 0; i < n; i++) {
        A[i] = new double[n];
    }
    A[0][0] = 4; A[0][1] = 1; A[0][2] = 1;
    A[1][0] = 1; A[1][1] = 3; A[1][2] = 1;
    A[2][0] = 1; A[2][1] = 1; A[2][2] = 2;

    double* b = new double[n];
    b[0] = 4; b[1] = 7; b[2] = 5;

    double* x = new double[n];
    x[0] = 0; x[1] = 0; x[2] = 0;

    conjugate_gradient(A, b, x, n);

    cout << "Solution: ";
    for (int i = 0; i < n; i++) {
        cout << x[i] << " ";
    }
    cout << endl;

    for (int i = 0; i < n; i++) {
        delete[] A[i];
    }
    delete[] A;
    delete[] b;
    delete[] x;

    return 0;
}
